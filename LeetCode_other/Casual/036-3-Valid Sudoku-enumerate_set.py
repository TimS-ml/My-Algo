# https://leetcode-cn.com/problems/valid-sudoku/
# 用set去重
# unhashable type: 'list'


class Solution:
    def isValidSudoku(self, board):
        ans = []
        for i, row in enumerate(board):  # i是纵坐标，row是横向的数组
            for j, val in enumerate(row):  # j是横坐标，c是数值
                if val != '.':
                    # (i, val), (val, j)这种写法主要是为了把横纵坐标做区分
                    # (i // 3, j // 3, val)是类似于(x, y)这种坐标形式标注格子
                    ans += [(i, val), (val, j), (i // 3, j // 3, val)]
                    # 输出前3列
                    if i == 3:
                        for k, d in enumerate(ans):
                            print(k, d)
        return len(set(ans)) == len(ans)


board_1 = [["5", "3", ".", ".", "7", ".", ".", ".", "."],
           ["6", ".", ".", "1", "9", "5", ".", ".", "."],
           [".", "9", "8", ".", ".", ".", ".", "6", "."],
           ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
           ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
           ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
           [".", "6", ".", ".", ".", ".", "2", "8", "."],
           [".", ".", ".", "4", "1", "9", ".", ".", "5"],
           [".", ".", ".", ".", "8", ".", ".", "7", "9"]]

board_2 = [["8", "3", ".", ".", "7", ".", ".", ".", "."],
           ["6", ".", ".", "1", "9", "5", ".", ".", "."],
           [".", "9", "8", ".", ".", ".", ".", "6", "."],
           ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
           ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
           ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
           [".", "6", ".", ".", ".", ".", "2", "8", "."],
           [".", ".", ".", "4", "1", "9", ".", ".", "5"],
           [".", ".", ".", ".", "8", ".", ".", "7", "9"]]

# print(Solution().isValidSudoku(board_1))
print(Solution().isValidSudoku(board_2))

# 2号和26号完全一致，1号格子内出现2次8
# 1 ('8', 0)
# 2 (0, 0, '8')
# 3 (0, '3')
# 4 ('3', 1)
# 5 (0, 0, '3')
# 6 (0, '7')
# 7 ('7', 4)
# 8 (0, 1, '7')
# 9 (1, '6')
# 10 ('6', 0)
# 11 (0, 0, '6')
# 12 (1, '1')
# 13 ('1', 3)
# 14 (0, 1, '1')
# 15 (1, '9')
# 16 ('9', 4)
# 17 (0, 1, '9')
# 18 (1, '5')
# 19 ('5', 5)
# 20 (0, 1, '5')
# 21 (2, '9')
# 22 ('9', 1)
# 23 (0, 0, '9')
# 24 (2, '8')
# 25 ('8', 2)
# 26 (0, 0, '8')
# 27 (2, '6')
# 28 ('6', 7)
# 29 (0, 2, '6')
# 30 (3, '8')
# 31 ('8', 0)
# 32 (1, 0, '8')
# 33 (3, '6')
# 34 ('6', 4)
# 35 (1, 1, '6')
# 36 (3, '3')
# 37 ('3', 8)
# 38 (1, 2, '3')
